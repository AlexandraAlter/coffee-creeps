// Generated by CoffeeScript 2.5.1
(function() {
  'use strict';
  var Gov, delIfRequired, logger, newFromMem, newIfRequired;

  logger = require('logger');

  Gov = require('governors.base');

  newFromMem = function(room, opts) {
    var cls, err, gov;
    try {
      cls = Gov.variants[opts.cls];
      gov = new cls(room, opts);
      logger.trace('reconstituted Gov', gov, {
        indent: 2
      });
      return gov;
    } catch (error) {
      err = error;
      logger.error('Gov.newFromMem failed\n', err.stack, {
        indent: 2
      });
    }
  };

  newIfRequired = function(room) {
    var curGov, gName, gov, ref, results;
    ref = Gov.variants;
    results = [];
    for (gName in ref) {
      gov = ref[gName];
      curGov = room.memory.governors[gov.name];
      if ((curGov == null) && gov.requiredInRoom(room, curGov)) {
        logger.info(`attaching gov ${gov.name} to room ${room.name}`);
        results.push(new gov(room, {}));
      } else {
        results.push(void 0);
      }
    }
    return results;
  };

  delIfRequired = function(room) {
    var curGov, gName, gov, ref, results;
    ref = Gov.variants;
    results = [];
    for (gName in ref) {
      gov = ref[gName];
      curGov = room.memory.governors[gov.name];
      if ((curGov != null) && !gov.requiredInRoom(room, curGov)) {
        logger.info(`deleting gov ${gov.name} from room ${room.name}`);
        results.push(delete room.memory.governors[gov.name]);
      } else {
        results.push(void 0);
      }
    }
    return results;
  };

  module.exports = {
    Gov,
    newFromMem,
    newIfRequired,
    delIfRequired,
    UpkeepGov: require('governors.upkeep', {
      BuildingGov: require('governors.building', {
        CombatGov: require('governors.combat')
      })
    })
  };

}).call(this);
